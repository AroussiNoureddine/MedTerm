Please answer the below Data Structure Questions:

why do we need data structure?
A.
A data structure is a particular way of storing and organizing data in a computer so that it can be used efficiently. Data structures provide a means to manage large amounts of data efficiently.



What are the various operations that can be performed on different Data Structures?
insert , delete , Sort, search, modification,

List out the areas in which data structures are applied extensively?
Database Management System, OS, Numerical Analysis,Graphics,Artificial Intelligence,Simulation

what is an Array?
data structure that stores a collection of values of the same type.

what is the difference between the Array and ArrayList?
Array is a fixed length data structure while ArrayList is a variable length Collection class
you can not use Generics along with Array, ArrayList allows you to use Generics to ensure type-safety.
 You can also compare Array vs ArrayList on How to calculate length of Array or size of ArrayList. All kinds of Array provides length variable which denotes length of Array while ArrayList provides size() method to calculate size of ArrayList in Java.
you can not store primitives in ArrayList.
create instance of ArrayList without specifying size.

what is LinkedList?
A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers

How is an Array different from Linked List?
 array consumes contiguous memory locations allocated at compile time, i.e. at the time of declaration of array, while for a linked list, memory is assigned as and when data is added to it, which means at runtime.

what is queue?
The Queue interface is available in java.util package and extends the Collection interface. The queue collection is used to hold the elements about to be processed and provides various operations like the insertion, removal etc. It is an ordered list of objects with its use limited to insert elements at the end of the list and deleting elements from the start of list i.e. it follows the FIFO or the First-In-First-Out principle.

what is stack?
Stack is a linear Data Structure which follow a particular order in which operations are performed.The order can be FILO(First in last Out) or it may be LIFO.

what is FIFO and LIFO?
FIFO:first in first out
LIFO: last in first out

what is the order of complexity?

what is the best case to search an element from an array?

what is the worst case to search an element from an array?

what is tree in data structure?
A Tree is a non-linear data structure where data objects are organized in terms of hierarchical relationship. The structure is non-linear in the sense that, unlike simple array and linked list implementation, data in a tree is not organized linearly. Each data element is stored in a structure called a node. The topmost or starting node of the (inverted) tree is called the root node. All nodes are linked with an edge and form hierarchical sub trees beginning with the root node.

what is graph in data structure?
A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as vertices and the edges are lines or arcs that connect any two nodes in the graph

what is the difference between the HashTable and HashMap?
Hashtable is synchronized, whereas HashMap is not.
Hashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.
One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn't be as easy if you were using Hashtable.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.

How HashMap works in java?
HashMap in Java works on hashing principle. It is a data structure which allows us to store object and retrieve it in constant time O(1) provided we know the key.

What is ArrayIndexOutOfBoundsException in java? When it occurs?

What are the different ways of copying an array into another array?

What is difference between an array and a linked list?

What is DFS and BFS?
Breadth First Traversal (or Search)
Depth First Traversals (or search)

What is Recursion?
Recursion is a basic programming technique you can use in Java, in which a method calls itself to solve some problem. A method that uses this technique is recursive.

What are linear and non linear data Structures?
linear data structure are array, queue, stack, linked list,etc..
non linear data structures are Trees and Graphs.

What is Big-(O)-notation?
Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.

Outlined different kind of sorting algorithm with time complexity?
Selection Sort	Ω(n^2)	θ(n^2)	O(n^2)
Bubble Sort	Ω(n)	θ(n^2)	O(n^2)
Insertion Sort	Ω(n)	θ(n^2)	O(n^2)
Heap Sort	Ω(n log(n))	θ(n log(n))	O(n log(n))
Quick Sort	Ω(n log(n))	θ(n log(n))	O(n^2)
Merge Sort	Ω(n log(n))	θ(n log(n))	O(n log(n))
Bucket Sort	Ω(n+k)	θ(n+k)	O(n^2)
Radix Sort	Ω(nk)	θ(nk)	O(nk)

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
TABLE 1.1 Characteristics of Data Structures
Data
Structure
Advantages Disadvantages
Array Quick insertion, very
fast access if index
known.
Slow search,
slow deletion,
fixed size.
Ordered
array
Quicker search than
unsorted array
Slow insertion and
deletion, fixed size.
Stack Provides last-in, first-out access. Slow access to other items.
Queue Provides first-in, first-out access. Slow access to other items.
Linked list Quick insertion, quick deletion. Slow search.
Binary
tree
Quick search, insertion, deletion (if tree
remains balanced).
Deletion algorithm is complex.
Red-black
tree
Quick search, insertion, deletion. Tree always
balanced.
Complex.
2-3-4 tree Quick search, insertion, deletion. Tree always
balanced. Similar trees good for disk storage.
Complex.
Hash tableVery fast access if key known. Fast
insertion
Slow deletion, access slow if
key not known, inefficient
memory usage.
Heap Fast insertion, deletion, access to largest item. Slow access to other items.
Graph Models real-world situations. Some algorithms are slow